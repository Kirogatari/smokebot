import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from telegram.helpers import escape_markdown

BOT_TOKEN = os.getenv("BOT_TOKEN") or "8064625815:AAFJKTIk2iU8IDBrsrdabMLqEAya_l_9Coo"
ADMIN_ID    = int(os.getenv("ADMIN_ID", "5601411156"))
BUTTON_ADMIN_USERNAME = "Men_of_G" 

greeting_text = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø —Å—Ç—É–¥–µ–Ω—Ç –ú–ú–ö, –ë–æ–≥–¥–∞–Ω –¢–æ–ª–∫–∞—á–µ–≤, –∏ —è –ø–∏—à—É –ø—Ä–æ–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É –Ω–∞ —Ç–µ–º—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.\n\n"
    "–Ø –∏–∑—É—á–∞—é —Ç–æ, –∫–∞–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è, –∏ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é.\n\n"
    "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–º–æ–≥—É—Ç –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å —ç—Ç—É —Ç–µ–º—É, –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –∏—Å–∫—Ä–µ–Ω–Ω–∏–º–∏, "
    "–∏ –ø–∏—à–∏—Ç–µ –≤—Å—ë, —á—Ç–æ —Å—á–∏—Ç–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–º ‚Äî —Ç—É—Ç –Ω–µ—Ç –º–µ–ª–æ—á–µ–π. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ "
    "(–ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ/–∞–ª–∫–æ–≥–æ–ª—å), —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ –Ω–∏—Ö ‚Äî —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ.\n\n"
    "‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
)

thank_you_text = (
    "–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ —Ç–≤–æ—ë –≤—Ä–µ–º—è. –≠—Ç–æ –º–∞–ª–µ–Ω—å–∫–∏–π –≤–∫–ª–∞–¥ –≤ –±–æ–ª—å—à–æ–µ –¥–µ–ª–æ. "
    "–î–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º, –∫–∞–∫ —è –≤–µ—Ä—é, —Å–ø–∞—Å—ë—Ç –Ω–µ –º–∞–ª–æ —Å–µ–º–µ–π –æ—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è üôè"
)

questions = [
    "1Ô∏è‚É£ –†–∞—Å—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ —Ç–æ–º –¥–Ω–µ, –∫–æ–≥–¥–∞ —Ç—ã –≤–ø–µ—Ä–≤—ã–µ –∑–∞–∫—É—Ä–∏–ª. –ß—Ç–æ —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª? –ö–∞–∫–∏–µ –º—ã—Å–ª–∏ —É —Ç–µ–±—è –±—ã–ª–∏ –≤–æ –≤—Ä–µ–º—è —ç—Ç–æ–≥–æ?",
    "2Ô∏è‚É£ –ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å?",
    "3Ô∏è‚É£ –ö–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∏ –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –∫ —Ç–µ–±–µ –≤ –≥–æ–ª–æ–≤—É –ø—Ä–∏—à–ª–∞ –∏–¥–µ—è –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–∫—É—Ä–∏—Ç—å?",
    "4Ô∏è‚É£ –†–∞—Å—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –≤ —Å–≤–æ–µ–π —Å–µ–º—å–µ: —á–∞—Å—Ç–æ –ª–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –¥–æ–º–∞? –ö–∞–∫ —Ç–≤–æ–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏?",
    "5Ô∏è‚É£ –ö–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å, —Ç–≤–æ—è –ø—Ä–∏–≤—ã—á–∫–∞ –∫—É—Ä–∏—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏?",
    "6Ô∏è‚É£ –ü–æ—á–µ–º—É —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –∫—É—Ä–∏—Ç—å? –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏ —Ç–µ–±–µ —Å–µ–π—á–∞—Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ —Ç–≤–æ—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å?",
    "7Ô∏è‚É£ –ï—Å–ª–∏ –±—ã —Ç–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—Ä–æ—Å–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –ø—Ä–æ–π—Ç–∏ —Ç–µ—Ä–∞–ø–∏—é –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–µ, —Ç—ã –±—ã —Å–æ–≥–ª–∞—Å–∏–ª—Å—è/–ª–∞—Å—å?"
]

user_states: dict[int, dict] = {}

def _escape_md(text: str) -> str:
    return escape_markdown(text or "", version=2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="start_survey")]]
    await update.message.reply_text(greeting_text, reply_markup=InlineKeyboardMarkup(kb))

async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    user_states[uid] = {"q_index": 0, "answers": [], "awaiting_answer": True}
    await query.edit_message_text(questions[0])

async def next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    state = user_states.get(uid)
    if not state or state["awaiting_answer"]:
        if state:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å.", show_alert=True)
        return
    if state["q_index"] + 1 < len(questions):
        state["q_index"] += 1
        state["awaiting_answer"] = True
        await query.edit_message_text(questions[state["q_index"]])

async def back_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    state = user_states.get(uid)
    if state and state["q_index"] > 0:
        state["q_index"] -= 1
        state["awaiting_answer"] = True
        await query.edit_message_text(questions[state["q_index"]])

async def finish_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    user_states.pop(uid, None)
    await query.edit_message_text(thank_you_text)

    kb = [[InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url=f"https://t.me/{BUTTON_ADMIN_USERNAME}")]]
    await context.bot.send_message(uid, "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º:",
                                   reply_markup=InlineKeyboardMarkup(kb))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = update.message.text
    state = user_states.get(uid)

    if not state:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return
    if not state["awaiting_answer"]:
        return

    q_idx = state["q_index"]
    if len(state["answers"]) > q_idx:
        state["answers"][q_idx] = (questions[q_idx], text)
    else:
        state["answers"].append((questions[q_idx], text))
    state["awaiting_answer"] = False

    user = update.effective_user
    header_raw = f"{user.full_name} (@{user.username})" if user.username else user.full_name
    header = _escape_md(header_raw)

    answer_md = (
        f"*–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* {header}\n"
        f"*–í–æ–ø—Ä–æ—Å:* {_escape_md(questions[q_idx])}\n"
        f"*–û—Ç–≤–µ—Ç:* {_escape_md(text)}"
    )
    await context.bot.send_message(ADMIN_ID, answer_md, parse_mode="MarkdownV2")

    buttons = []
    if q_idx > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="back_question"))
    if q_idx + 1 < len(questions):
        buttons.append(InlineKeyboardButton("‚û°Ô∏è Next", callback_data="next_question"))
    else:
        buttons.append(InlineKeyboardButton("‚úÖ Finish", callback_data="finish_survey"))

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É:",
        reply_markup=InlineKeyboardMarkup([buttons])
    )
    
def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN env var is not set!")

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(start_survey, pattern="^start_survey$"))
    app.add_handler(CallbackQueryHandler(next_question,  pattern="^next_question$"))
    app.add_handler(CallbackQueryHandler(back_question,  pattern="^back_question$"))
    app.add_handler(CallbackQueryHandler(finish_survey, pattern="^finish_survey$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    if os.getenv("RENDER"):
        port = int(os.getenv("PORT", "10000"))
        public_url = os.getenv("RENDER_EXTERNAL_URL")
        webhook_path = f"/{BOT_TOKEN}"
        webhook_url  = f"{public_url}{webhook_path}"

        print(f"Starting webhook on 0.0.0.0:{port} -> {webhook_url}")
        app.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=webhook_path,
            webhook_url=webhook_url,
        )
    else:
        print("Running in polling mode‚Ä¶  Press Ctrl+C to stop.")
        app.run_polling()

if __name__ == "__main__":
    main()
